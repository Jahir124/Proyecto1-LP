
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARROW AS ASSERT ASSIGN BITNOT BOOL BREAK CASE CATCH CIRCUMFLEX CLASS COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_EQUAL DO DOLLAR_SIGN DOT DOUBLE DOUBLE_COLON DYNAMIC ELSE ENUM EQUALS EXPORT EXTENDS FALSE FINAL FINALLY FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF IMPLEMENTS IMPORT IN INCREMENT INT INT_DIVIDE IS LBRACE LBRACKET LENGTH LESS LESS_EQUAL LIBRARY LIST LPAREN MAP MINUS MINUS_EQUAL MODULE MODULE_EQUAL NOT NOT_EQUALS OR PART PARTOF PLUS PLUS_EQUAL PRINT QUESTION QUOTATION_MARK RBRACE RBRACKET READLINESYNC REQUIRED RETURN RPAREN SEMICOLON SET SINGLE_QUOTE STATIC STDIN STRING SUPER SWITCH THIS THROW TIMES TIMES_EQUAL TRUE TRY VAR VOID WHILE WITHcompiler : statement_composedstatement_composed : statement\n                      | statement_composed statementstatement : print\n                 | control_structures\n                 | function\n                 | list_def\n                 | variable_def\n                 | SEMICOLONvariable_def : type ID ASSIGN expression SEMICOLON\n                           | DYNAMIC ID ASSIGN expression SEMICOLON\n                           | VAR ID ASSIGN expression SEMICOLON\n                           | STATIC type ID ASSIGN expression SEMICOLON\n                           | STATIC VAR ID ASSIGN expression SEMICOLON\n                           | STATIC DYNAMIC ID ASSIGN expression SEMICOLONprint : PRINT LPAREN RPAREN SEMICOLON\n             | PRINT LPAREN value RPAREN SEMICOLON\n             | PRINT LPAREN expression RPAREN SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : value PLUS valueexpression : valuecontrol_structures : if_block\n                          | if_block else_blockif_block : IF LPAREN conditions RPAREN LBRACKET statement_composed RBRACKETelse_block : ELSE LBRACKET statement_composed RBRACKETconditions : condition\n                  | conditions AND condition\n                  | conditions OR conditioncondition : value comparison_operator value\n                 | NOT valuecomparison_operator : GREATER\n                  | LESS\n                  | GREATER_EQUAL\n                  | LESS_EQUAL\n                  | EQUALSfunction : type ID LPAREN parameters RPAREN LBRACKET statement_composed RBRACKET\n                | VOID ID LPAREN parameters RPAREN LBRACKET statement_composed RBRACKET\n                | type ID LPAREN RPAREN LBRACKET statement_composed RBRACKET\n                | VOID ID LPAREN RPAREN LBRACKET statement_composed RBRACKETparameters : parameter\n                      | parameters COMMA parameterparameter : type ID\n                 | REQUIRED type IDtype : STRING\n            | INT\n            | DOUBLE\n            | BOOLlist_def : LIST LBRACKET value_list RBRACKET SEMICOLON\n                       | LIST LESS type GREATER ID ASSIGN LBRACKET value_list RBRACKET SEMICOLONvalue_list : value\n                  | value_list COMMA valuevalue : INT\n             | FLOAT\n             | STRING\n             | IDvalue : TRUE\n             | FALSE'
    
_lr_action_items = {'SEMICOLON':([0,2,3,4,5,6,7,8,9,11,23,25,37,40,41,42,43,44,45,46,62,63,65,70,76,77,80,83,84,98,99,100,101,102,103,104,105,109,111,113,114,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,146,147,],[9,9,-2,-4,-5,-6,-7,-8,-9,-25,-3,-26,62,-55,-56,-57,-58,-59,-60,9,-16,98,100,9,111,-24,114,117,118,-17,-23,-18,-19,-20,-21,-22,-28,9,-10,9,-51,-11,-12,133,134,135,9,9,9,9,9,-13,-14,-15,9,9,-41,9,-42,-27,-39,-40,147,-52,]),'PRINT':([0,2,3,4,5,6,7,8,9,11,23,25,46,62,70,98,100,105,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[10,10,-2,-4,-5,-6,-7,-8,-9,-25,-3,-26,10,-16,10,-17,-18,-28,10,-10,10,-51,-11,-12,10,10,10,10,10,-13,-14,-15,10,10,-41,10,-42,-27,-39,-40,-52,]),'VOID':([0,2,3,4,5,6,7,8,9,11,23,25,46,62,70,98,100,105,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[13,13,-2,-4,-5,-6,-7,-8,-9,-25,-3,-26,13,-16,13,-17,-18,-28,13,-10,13,-51,-11,-12,13,13,13,13,13,-13,-14,-15,13,13,-41,13,-42,-27,-39,-40,-52,]),'LIST':([0,2,3,4,5,6,7,8,9,11,23,25,46,62,70,98,100,105,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[14,14,-2,-4,-5,-6,-7,-8,-9,-25,-3,-26,14,-16,14,-17,-18,-28,14,-10,14,-51,-11,-12,14,14,14,14,14,-13,-14,-15,14,14,-41,14,-42,-27,-39,-40,-52,]),'DYNAMIC':([0,2,3,4,5,6,7,8,9,11,17,23,25,46,62,70,98,100,105,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[15,15,-2,-4,-5,-6,-7,-8,-9,-25,35,-3,-26,15,-16,15,-17,-18,-28,15,-10,15,-51,-11,-12,15,15,15,15,15,-13,-14,-15,15,15,-41,15,-42,-27,-39,-40,-52,]),'VAR':([0,2,3,4,5,6,7,8,9,11,17,23,25,46,62,70,98,100,105,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[16,16,-2,-4,-5,-6,-7,-8,-9,-25,34,-3,-26,16,-16,16,-17,-18,-28,16,-10,16,-51,-11,-12,16,16,16,16,16,-13,-14,-15,16,16,-41,16,-42,-27,-39,-40,-52,]),'STATIC':([0,2,3,4,5,6,7,8,9,11,23,25,46,62,70,98,100,105,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[17,17,-2,-4,-5,-6,-7,-8,-9,-25,-3,-26,17,-16,17,-17,-18,-28,17,-10,17,-51,-11,-12,17,17,17,17,17,-13,-14,-15,17,17,-41,17,-42,-27,-39,-40,-52,]),'IF':([0,2,3,4,5,6,7,8,9,11,23,25,46,62,70,98,100,105,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[18,18,-2,-4,-5,-6,-7,-8,-9,-25,-3,-26,18,-16,18,-17,-18,-28,18,-10,18,-51,-11,-12,18,18,18,18,18,-13,-14,-15,18,18,-41,18,-42,-27,-39,-40,-52,]),'STRING':([0,2,3,4,5,6,7,8,9,11,17,23,24,25,29,30,36,46,47,48,49,53,54,61,62,64,66,67,68,69,70,75,81,85,86,87,89,90,91,92,93,94,95,96,98,100,105,108,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,141,142,143,144,147,],[19,19,-2,-4,-5,-6,-7,-8,-9,-25,19,-3,42,-26,42,19,42,19,19,42,19,42,42,42,-16,42,42,42,42,42,19,19,42,42,42,42,42,42,42,-34,-35,-36,-37,-38,-17,-18,-28,19,19,-10,19,-51,-11,-12,19,19,19,19,19,-13,-14,-15,19,19,-41,19,-42,42,-27,-39,-40,-52,]),'INT':([0,2,3,4,5,6,7,8,9,11,17,23,24,25,29,30,36,46,47,48,49,53,54,61,62,64,66,67,68,69,70,75,81,85,86,87,89,90,91,92,93,94,95,96,98,100,105,108,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,141,142,143,144,147,],[20,20,-2,-4,-5,-6,-7,-8,-9,-25,20,-3,40,-26,40,20,40,20,20,40,20,40,40,40,-16,40,40,40,40,40,20,20,40,40,40,40,40,40,40,-34,-35,-36,-37,-38,-17,-18,-28,20,20,-10,20,-51,-11,-12,20,20,20,20,20,-13,-14,-15,20,20,-41,20,-42,40,-27,-39,-40,-52,]),'DOUBLE':([0,2,3,4,5,6,7,8,9,11,17,23,25,30,46,47,49,62,70,75,98,100,105,108,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[21,21,-2,-4,-5,-6,-7,-8,-9,-25,21,-3,-26,21,21,21,21,-16,21,21,-17,-18,-28,21,21,-10,21,-51,-11,-12,21,21,21,21,21,-13,-14,-15,21,21,-41,21,-42,-27,-39,-40,-52,]),'BOOL':([0,2,3,4,5,6,7,8,9,11,17,23,25,30,46,47,49,62,70,75,98,100,105,108,109,111,113,114,117,118,122,126,128,130,131,133,134,135,136,137,138,139,140,142,143,144,147,],[22,22,-2,-4,-5,-6,-7,-8,-9,-25,22,-3,-26,22,22,22,22,-16,22,22,-17,-18,-28,22,22,-10,22,-51,-11,-12,22,22,22,22,22,-13,-14,-15,22,22,-41,22,-42,-27,-39,-40,-52,]),'$end':([1,2,3,4,5,6,7,8,9,11,23,25,62,98,100,105,111,114,117,118,133,134,135,138,140,142,143,144,147,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-25,-3,-26,-16,-17,-18,-28,-10,-51,-11,-12,-13,-14,-15,-41,-42,-27,-39,-40,-52,]),'RBRACKET':([3,4,5,6,7,8,9,11,23,25,40,41,42,43,44,45,50,51,62,70,98,100,105,111,114,115,117,118,128,131,133,134,135,136,137,138,139,140,142,143,144,145,147,],[-2,-4,-5,-6,-7,-8,-9,-25,-3,-26,-55,-56,-57,-58,-59,-60,80,-53,-16,105,-17,-18,-28,-10,-51,-54,-11,-12,138,140,-13,-14,-15,142,143,-41,144,-42,-27,-39,-40,146,-52,]),'LPAREN':([10,18,27,28,],[24,36,47,49,]),'ELSE':([11,142,],[26,-27,]),'ID':([12,13,15,16,19,20,21,22,24,29,33,34,35,36,48,53,54,61,64,66,67,68,69,71,81,82,85,86,87,89,90,91,92,93,94,95,96,110,141,],[27,28,31,32,-47,-48,-49,-50,43,43,55,56,57,43,43,43,43,43,43,43,43,43,43,106,43,116,43,43,43,43,43,43,-34,-35,-36,-37,-38,129,43,]),'LBRACKET':([14,26,73,79,88,107,112,132,],[29,46,109,113,122,126,130,141,]),'LESS':([14,40,41,42,43,44,45,60,],[30,-55,-56,-57,-58,-59,-60,93,]),'GREATER':([19,20,21,22,40,41,42,43,44,45,52,60,],[-47,-48,-49,-50,-55,-56,-57,-58,-59,-60,82,92,]),'RPAREN':([24,38,39,40,41,42,43,44,45,47,49,58,59,72,74,77,78,97,99,101,102,103,104,106,123,124,125,127,129,],[37,63,65,-55,-56,-57,-58,-59,-60,73,79,88,-29,107,-43,-24,112,-33,-23,-19,-20,-21,-22,-45,-30,-31,-32,-44,-46,]),'FLOAT':([24,29,36,48,53,54,61,64,66,67,68,69,81,85,86,87,89,90,91,92,93,94,95,96,141,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-34,-35,-36,-37,-38,41,]),'TRUE':([24,29,36,48,53,54,61,64,66,67,68,69,81,85,86,87,89,90,91,92,93,94,95,96,141,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-34,-35,-36,-37,-38,44,]),'FALSE':([24,29,36,48,53,54,61,64,66,67,68,69,81,85,86,87,89,90,91,92,93,94,95,96,141,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-34,-35,-36,-37,-38,45,]),'ASSIGN':([27,31,32,55,56,57,116,],[48,53,54,85,86,87,132,]),'NOT':([36,89,90,],[61,61,61,]),'PLUS':([38,39,40,41,42,43,44,45,76,77,83,84,99,101,102,103,104,119,120,121,],[64,66,-55,-56,-57,-58,-59,-60,66,64,66,66,-23,66,66,66,66,66,66,66,]),'MINUS':([38,39,40,41,42,43,44,45,76,77,83,84,99,101,102,103,104,119,120,121,],[-24,67,-55,-56,-57,-58,-59,-60,67,-24,67,67,-23,67,67,67,67,67,67,67,]),'TIMES':([38,39,40,41,42,43,44,45,76,77,83,84,99,101,102,103,104,119,120,121,],[-24,68,-55,-56,-57,-58,-59,-60,68,-24,68,68,-23,68,68,68,68,68,68,68,]),'DIVIDE':([38,39,40,41,42,43,44,45,76,77,83,84,99,101,102,103,104,119,120,121,],[-24,69,-55,-56,-57,-58,-59,-60,69,-24,69,69,-23,69,69,69,69,69,69,69,]),'COMMA':([40,41,42,43,44,45,50,51,72,74,78,106,115,127,129,145,],[-55,-56,-57,-58,-59,-60,81,-53,108,-43,108,-45,-54,-44,-46,81,]),'GREATER_EQUAL':([40,41,42,43,44,45,60,],[-55,-56,-57,-58,-59,-60,94,]),'LESS_EQUAL':([40,41,42,43,44,45,60,],[-55,-56,-57,-58,-59,-60,95,]),'EQUALS':([40,41,42,43,44,45,60,],[-55,-56,-57,-58,-59,-60,96,]),'AND':([40,41,42,43,44,45,58,59,97,123,124,125,],[-55,-56,-57,-58,-59,-60,89,-29,-33,-30,-31,-32,]),'OR':([40,41,42,43,44,45,58,59,97,123,124,125,],[-55,-56,-57,-58,-59,-60,90,-29,-33,-30,-31,-32,]),'REQUIRED':([47,49,108,],[75,75,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'compiler':([0,],[1,]),'statement_composed':([0,46,109,113,122,126,130,],[2,70,128,131,136,137,139,]),'statement':([0,2,46,70,109,113,122,126,128,130,131,136,137,139,],[3,23,3,23,3,3,3,3,23,3,23,23,23,23,]),'print':([0,2,46,70,109,113,122,126,128,130,131,136,137,139,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'control_structures':([0,2,46,70,109,113,122,126,128,130,131,136,137,139,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'function':([0,2,46,70,109,113,122,126,128,130,131,136,137,139,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'list_def':([0,2,46,70,109,113,122,126,128,130,131,136,137,139,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'variable_def':([0,2,46,70,109,113,122,126,128,130,131,136,137,139,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'if_block':([0,2,46,70,109,113,122,126,128,130,131,136,137,139,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'type':([0,2,17,30,46,47,49,70,75,108,109,113,122,126,128,130,131,136,137,139,],[12,12,33,52,12,71,71,12,110,71,12,12,12,12,12,12,12,12,12,12,]),'else_block':([11,],[25,]),'value':([24,29,36,48,53,54,61,64,66,67,68,69,81,85,86,87,89,90,91,141,],[38,51,60,77,77,77,97,99,77,77,77,77,115,77,77,77,60,60,125,51,]),'expression':([24,48,53,54,66,67,68,69,85,86,87,],[39,76,83,84,101,102,103,104,119,120,121,]),'value_list':([29,141,],[50,145,]),'conditions':([36,],[58,]),'condition':([36,89,90,],[59,123,124,]),'parameters':([47,49,],[72,78,]),'parameter':([47,49,108,],[74,74,127,]),'comparison_operator':([60,],[91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> compiler","S'",1,None,None,None),
  ('compiler -> statement_composed','compiler',1,'p_compiler','analizador_sintactico.py',5),
  ('statement_composed -> statement','statement_composed',1,'p_statement_composed','analizador_sintactico.py',8),
  ('statement_composed -> statement_composed statement','statement_composed',2,'p_statement_composed','analizador_sintactico.py',9),
  ('statement -> print','statement',1,'p_statement','analizador_sintactico.py',12),
  ('statement -> control_structures','statement',1,'p_statement','analizador_sintactico.py',13),
  ('statement -> function','statement',1,'p_statement','analizador_sintactico.py',14),
  ('statement -> list_def','statement',1,'p_statement','analizador_sintactico.py',15),
  ('statement -> variable_def','statement',1,'p_statement','analizador_sintactico.py',16),
  ('statement -> SEMICOLON','statement',1,'p_statement','analizador_sintactico.py',17),
  ('variable_def -> type ID ASSIGN expression SEMICOLON','variable_def',5,'p_variable_def','analizador_sintactico.py',20),
  ('variable_def -> DYNAMIC ID ASSIGN expression SEMICOLON','variable_def',5,'p_variable_def','analizador_sintactico.py',21),
  ('variable_def -> VAR ID ASSIGN expression SEMICOLON','variable_def',5,'p_variable_def','analizador_sintactico.py',22),
  ('variable_def -> STATIC type ID ASSIGN expression SEMICOLON','variable_def',6,'p_variable_def','analizador_sintactico.py',23),
  ('variable_def -> STATIC VAR ID ASSIGN expression SEMICOLON','variable_def',6,'p_variable_def','analizador_sintactico.py',24),
  ('variable_def -> STATIC DYNAMIC ID ASSIGN expression SEMICOLON','variable_def',6,'p_variable_def','analizador_sintactico.py',25),
  ('print -> PRINT LPAREN RPAREN SEMICOLON','print',4,'p_print','analizador_sintactico.py',29),
  ('print -> PRINT LPAREN value RPAREN SEMICOLON','print',5,'p_print','analizador_sintactico.py',30),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','analizador_sintactico.py',31),
  ('expression -> expression PLUS expression','expression',3,'p_expression_arithmetic','analizador_sintactico.py',35),
  ('expression -> expression MINUS expression','expression',3,'p_expression_arithmetic','analizador_sintactico.py',36),
  ('expression -> expression TIMES expression','expression',3,'p_expression_arithmetic','analizador_sintactico.py',37),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_arithmetic','analizador_sintactico.py',38),
  ('expression -> value PLUS value','expression',3,'p_expression_simplified','analizador_sintactico.py',41),
  ('expression -> value','expression',1,'p_expression_value','analizador_sintactico.py',44),
  ('control_structures -> if_block','control_structures',1,'p_control_structures','analizador_sintactico.py',49),
  ('control_structures -> if_block else_block','control_structures',2,'p_control_structures','analizador_sintactico.py',50),
  ('if_block -> IF LPAREN conditions RPAREN LBRACKET statement_composed RBRACKET','if_block',7,'p_if_block','analizador_sintactico.py',53),
  ('else_block -> ELSE LBRACKET statement_composed RBRACKET','else_block',4,'p_else_block','analizador_sintactico.py',57),
  ('conditions -> condition','conditions',1,'p_conditions','analizador_sintactico.py',61),
  ('conditions -> conditions AND condition','conditions',3,'p_conditions','analizador_sintactico.py',62),
  ('conditions -> conditions OR condition','conditions',3,'p_conditions','analizador_sintactico.py',63),
  ('condition -> value comparison_operator value','condition',3,'p_condition','analizador_sintactico.py',66),
  ('condition -> NOT value','condition',2,'p_condition','analizador_sintactico.py',67),
  ('comparison_operator -> GREATER','comparison_operator',1,'p_comparison_operator','analizador_sintactico.py',70),
  ('comparison_operator -> LESS','comparison_operator',1,'p_comparison_operator','analizador_sintactico.py',71),
  ('comparison_operator -> GREATER_EQUAL','comparison_operator',1,'p_comparison_operator','analizador_sintactico.py',72),
  ('comparison_operator -> LESS_EQUAL','comparison_operator',1,'p_comparison_operator','analizador_sintactico.py',73),
  ('comparison_operator -> EQUALS','comparison_operator',1,'p_comparison_operator','analizador_sintactico.py',74),
  ('function -> type ID LPAREN parameters RPAREN LBRACKET statement_composed RBRACKET','function',8,'p_function','analizador_sintactico.py',78),
  ('function -> VOID ID LPAREN parameters RPAREN LBRACKET statement_composed RBRACKET','function',8,'p_function','analizador_sintactico.py',79),
  ('function -> type ID LPAREN RPAREN LBRACKET statement_composed RBRACKET','function',7,'p_function','analizador_sintactico.py',80),
  ('function -> VOID ID LPAREN RPAREN LBRACKET statement_composed RBRACKET','function',7,'p_function','analizador_sintactico.py',81),
  ('parameters -> parameter','parameters',1,'p_parameters','analizador_sintactico.py',84),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','analizador_sintactico.py',85),
  ('parameter -> type ID','parameter',2,'p_parameter','analizador_sintactico.py',88),
  ('parameter -> REQUIRED type ID','parameter',3,'p_parameter','analizador_sintactico.py',89),
  ('type -> STRING','type',1,'p_type','analizador_sintactico.py',93),
  ('type -> INT','type',1,'p_type','analizador_sintactico.py',94),
  ('type -> DOUBLE','type',1,'p_type','analizador_sintactico.py',95),
  ('type -> BOOL','type',1,'p_type','analizador_sintactico.py',96),
  ('list_def -> LIST LBRACKET value_list RBRACKET SEMICOLON','list_def',5,'p_list_def','analizador_sintactico.py',100),
  ('list_def -> LIST LESS type GREATER ID ASSIGN LBRACKET value_list RBRACKET SEMICOLON','list_def',10,'p_list_def','analizador_sintactico.py',101),
  ('value_list -> value','value_list',1,'p_value_list','analizador_sintactico.py',104),
  ('value_list -> value_list COMMA value','value_list',3,'p_value_list','analizador_sintactico.py',105),
  ('value -> INT','value',1,'p_value','analizador_sintactico.py',109),
  ('value -> FLOAT','value',1,'p_value','analizador_sintactico.py',110),
  ('value -> STRING','value',1,'p_value','analizador_sintactico.py',111),
  ('value -> ID','value',1,'p_value','analizador_sintactico.py',112),
  ('value -> TRUE','value',1,'p_value_bool','analizador_sintactico.py',115),
  ('value -> FALSE','value',1,'p_value_bool','analizador_sintactico.py',116),
]
